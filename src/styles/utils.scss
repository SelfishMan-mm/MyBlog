// 样式工具函数和高级混合器

// 颜色工具函数
@function alpha($color, $opacity) {
  @return rgba($color, $opacity);
}

@function lighten-color($color, $amount: 10%) {
  @return mix(white, $color, $amount);
}

@function darken-color($color, $amount: 10%) {
  @return mix(black, $color, $amount);
}

// 尺寸计算函数
@function rem($px) {
  @return #{$px / 16}rem;
}

@function em($px, $base: 16) {
  @return #{$px / $base}em;
}

// 响应式字体大小
@function fluid-font-size($min-size, $max-size, $min-width: 320px, $max-width: 1200px) {
  @return calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-width}) / #{strip-unit($max-width - $min-width)}));
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// 高级布局混合器
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-top: percentage($height / $width);
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

@mixin grid-auto-fit($min-width: 250px, $gap: spacing(4)) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
}

@mixin grid-auto-fill($min-width: 250px, $gap: spacing(4)) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));
  gap: $gap;
}

// 视觉效果混合器
@mixin backdrop-blur($amount: 10px) {
  backdrop-filter: blur($amount);
  -webkit-backdrop-filter: blur($amount);
}

@mixin text-gradient($gradient) {
  background: $gradient;
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

@mixin border-gradient($gradient, $width: 1px) {
  position: relative;
  background: $gradient;
  
  &::before {
    content: '';
    position: absolute;
    inset: $width;
    background: color(bg-primary);
    border-radius: inherit;
  }
}

// 动画工具混合器
@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}

@mixin animation($name, $duration: 1s, $timing: ease, $delay: 0s, $iteration: 1, $direction: normal, $fill: both) {
  animation: $name $duration $timing $delay $iteration $direction $fill;
}

// 可访问性混合器
@mixin focus-ring($color: color(primary), $width: 2px, $offset: 2px) {
  &:focus-visible {
    outline: $width solid $color;
    outline-offset: $offset;
  }
}

@mixin high-contrast-border($color: currentColor) {
  @media (prefers-contrast: high) {
    border: 1px solid $color;
  }
}

// 打印样式混合器
@mixin print-hidden {
  @media print {
    display: none !important;
  }
}

@mixin print-only {
  display: none;
  
  @media print {
    display: block;
  }
}

// 状态混合器
@mixin loading-state {
  position: relative;
  pointer-events: none;
  
  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid color(border-primary);
    border-top-color: color(primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
}

@include keyframes(spin) {
  to {
    transform: rotate(360deg);
  }
}

@mixin skeleton-loading($width: 100%, $height: 1em) {
  width: $width;
  height: $height;
  background: linear-gradient(90deg, color(bg-secondary) 25%, color(border-primary) 50%, color(bg-secondary) 75%);
  background-size: 200% 100%;
  animation: skeleton-loading 1.5s infinite;
  border-radius: border-radius(sm);
}

@include keyframes(skeleton-loading) {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

// 工具类生成器
@mixin generate-spacing-utilities($property, $prefix) {
  @each $key, $value in $spacing {
    .#{$prefix}-#{$key} {
      #{$property}: $value;
    }
  }
}

@mixin generate-color-utilities($prefix) {
  @each $key, $value in $colors {
    .#{$prefix}-#{$key} {
      @if $prefix == 'text' {
        color: $value;
      } @else if $prefix == 'bg' {
        background-color: $value;
      } @else if $prefix == 'border' {
        border-color: $value;
      }
    }
  }
}

// 媒体查询工具
@mixin hover-supported {
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      @content;
    }
  }
}

@mixin touch-device {
  @media (hover: none) and (pointer: coarse) {
    @content;
  }
}

@mixin retina {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}

// 容器查询 (实验性)
@mixin container-query($condition) {
  @container #{$condition} {
    @content;
  }
}